package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, IDENT, LBRACE, RBRACE, CONST, COMMA, ASSIGN, SEMI, NUM, CHAR, BOOL;
terminal LBRACKET, RBRACKET, CLASS, EXTENDS, LPAREN, RPAREN, VOID, EQ, NEQ, GT, GTE, LT, LTE;
terminal PLUS, MINUS, MUL, MOD, DIV;

nonterminal Program, DeclarationList, MethodDeclarationList, Declaration, ConstDecl;
nonterminal VarDecl, ClassDecl, Type, Constant, MultipleConstDecl, SingleVarDecl;
nonterminal MultipleVarDecl, VarDeclList, ConstructorDeclList, ConstructorDecl;
nonterminal MethodDeclList, MethodDecl, ClassDeclName, StatementList, Statement;
nonterminal FormPars, MethodDeclReturn, Label, Assignop, Relop, Addop, Mulop;
nonterminal ;

Program ::= (Program) PROG IDENT DeclarationList LBRACE MethodDeclarationList RBRACE;

DeclarationList ::= (DeclarationList) DeclarationList Declaration
					|
					(NoDeclaration) /* epsilon */
					;
					
Declaration ::= (ConstDeclaration) ConstDecl
				|
				(VarDeclaration) VarDecl
				|
				(ClassDeclaration) ClassDecl
				;
				
ConstDecl ::= 	(SingleConstDecl) CONST Type IDENT ASSIGN Constant SEMI
				|
				(MultipleConstDecl) CONST Type IDENT ASSIGN Constant MultipleConstDecl SEMI
				;
				
MultipleConstDecl ::= 	(LastMultipleConstDecl) COMMA IDENT ASSIGN Constant
						|
						(MultipleConstDeclList) COMMA IDENT ASSIGN Constant MultipleConstDecl
						;

Constant ::= 	(NumConst) NUM
				|
				(CharConst) CHAR
				|
				(BoolConst) BOOL
				;

VarDecl ::= 	(VarDecl) SingleVarDecl SEMI
				|
				(MultipleVarDecl) SingleVarDecl MultipleVarDecl SEMI
				;
				
SingleVarDecl ::= 	(SingleVarDecl) Type IDENT
					|
					(SingleVarArrayDecl) Type IDENT LBRACKET RBRACKET
					;

MultipleVarDecl ::= (LastMultipleVarDecl) COMMA SingleVarDecl
					|
					(MultipleVarDeclList) COMMA SingleVarDecl MultipleVarDecl

ClassDeclName ::= 	(ClassDeclNameExtend) CLASS IDENT EXTENDS Type
					|
					(ClassDeclName) CLASS IDENT
					;
					
VarDeclList ::= (VarDeclList) VarDeclList VarDecl
				|
				(EmptyVarDeclList) /* epsilon */
				;
					
ClassDecl ::= 	(ClassDecl) ClassDeclName LBRACE VarDeclList RBRACE
				|
				(ClassDeclMethods) ClassDeclName LBRACE VarDeclList LBRACE ConstructorDeclList MethodDeclList RBRACE RBRACE
				;

ConstructorDeclList ::= (ConstructorDeclList) ConstructorDeclList ConstructorDecl
						|
						(EmptyConstructorDeclList) /* epsilon */
						;

MethodDeclList ::= 	(MethodDeclList) MethodDeclList MethodDecl
					|
					(EmptyMethodDeclList) /* epsilon */
					;

ConstructorDecl ::= (ConstructorDecl) IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
					|
					(ConstructorDeclFormParams) IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
					;

StatementList ::= 	(StatementList) StatementList Statement
					|
					(EmptyStatementList) /* epsilon */
					;

MethodDeclReturn ::= 	(MethodDeclReturnVoid) VOID
						|
						(MethodDeclReturn) Type
						;

MethodDecl ::= 	(MethodDecl) MethodDeclReturn IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
				|
				(MethodDeclFormPars) MethodDeclReturn IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				;

FormPars ::= 	(FormPar) SingleVarDecl
				|
				(FormPars) SingleVarDecl COMMA FormPars
				
Type ::= (Type) IDENT;



Label ::= (Label) IDENT;

Assignop ::= (Assignop) ASSIGN;

Relop ::= 	(Equals) EQ
			|
			(NotEquals) NEQ
			|
			(Greater) GT
			|
			(GreaterEquals) GTE
			|
			(Lesser) LT
			|
			(LesserEquals) LTE
			;

Addop ::= 	(Plus) PLUS
			|
			(Minus) MINUS
			;
			
Mulop ::=	(Mul) MUL
			|
			(Div) DIV
			|
			(Mod) MOD
			;







terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal IF, ELSE;

nonterminal MethodDeclList, VarDecl;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

Program ::= (Program) PROG ProgName:p VarDeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl  
				|
				(NoVarDecl)/* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI 
;

Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched ;

Unmatched ::= (UnmatchedIf) IF Expr Statement | (UnmatchedIfElse) IF Expr Matched ELSE Unmatched;
	
				  
Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI 
			  |
			  (ErrAssignment) Designator EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) IF Expr Matched ELSE Matched
			  |
			  (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

Factor ::= (Const) NUMBER
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (Designator) IDENT:name
;

Addop ::= (Addop) PLUS ;

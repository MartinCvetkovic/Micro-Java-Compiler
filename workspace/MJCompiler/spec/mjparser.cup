package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, CONST, COMMA, ASSIGN, SEMI, LBRACKET, RBRACKET;
terminal CLASS, EXTENDS, LPAREN, RPAREN, VOID, EQ, NEQ, GT, GTE, LT, LTE;
terminal PLUS, MINUS, MUL, MOD, DIV, IF, ELSE, BREAK, CONTINUE, RETURN, READ, PRINT;
terminal DOT, FOREACH, OR, AND, NEW, ARROW, WHILE, INC, DEC, DO, ENUM, COLON, THIS;
terminal String IDENT;
terminal Character CHAR;
terminal Boolean BOOL;
terminal Integer NUM;

nonterminal Program, DeclarationList, MethodDeclarationList, Declaration, ConstDecl;
nonterminal VarDecl, ClassDecl, Type, Constant, MultipleConstDecl, SingleVarDecl;
nonterminal MultipleVarDecl, VarDeclList, ConstructorDeclList, ConstructorDecl;
nonterminal MethodDeclList, MethodDecl, ClassDeclName, StatementList, Statement;
nonterminal FormPars, MethodDeclReturn, Label, Assignop, Relop, Addop, Mulop;
nonterminal DesignatorStatement, Expr, Designator, PrintArgs, ActPars, DesignatorList;
nonterminal Condition, CondTerm, CondFact, Term, AddopTermList, Factor, OptionalDesignator;
nonterminal GlobalVarDecl, ExprError;

precedence left ELSE;

Program ::= (PProgram) PROG IDENT:progName DeclarationList LBRACE MethodDeclList RBRACE
			|
			(ProgramNoMethods) PROG IDENT:progName DeclarationList LBRACE RBRACE
			;

DeclarationList ::= (DeclarationsList) DeclarationList Declaration
					|
					(NoDeclaration) /* epsilon */
					;
					
Declaration ::= (ConstDeclaration) ConstDecl
				|
				(GlobalVarDeclaration) GlobalVarDecl
				|
				(ClassDeclaration) ClassDecl
				;
				
ConstDecl ::= 	(SingleConstDecl) CONST Type IDENT ASSIGN Constant SEMI
				|
				(MultipleConstDeclaration) CONST Type IDENT ASSIGN Constant MultipleConstDecl SEMI
				;
				
MultipleConstDecl ::= 	(LastMultipleConstDecl) COMMA IDENT ASSIGN Constant
						|
						(MultipleConstDeclList) COMMA IDENT ASSIGN Constant MultipleConstDecl
						;

Constant ::= 	(NumConst) NUM
				|
				(CharConst) CHAR
				|
				(BoolConst) BOOL
				;


GlobalVarDecl ::= 	(SingleGlobalVarDeclarationVarDecl) Type SingleVarDecl SEMI
					|
					(SingleGlobalVarDeclarationError) error:e SEMI
					{: parser.report_error("Sintaksna greska prilikom deklaracije globalne promenljive na liniji " + eleft, null); :}
					|
					(MultipleGlobalVarDeclaration) Type SingleVarDecl MultipleVarDecl SEMI
					|
					(MultipleGlobalVarDeclarationError) error:e COMMA
					{: parser.report_error("Sintaksna greska prilikom deklaracije globalne promenljive na liniji " + eleft, null); :}
					;

VarDecl ::= 	(SingleVarDeclarationVarDecl) Type SingleVarDecl SEMI
				|
				(MultipleVarDeclaration) Type SingleVarDecl MultipleVarDecl SEMI
				;
				
SingleVarDecl ::= 	(SingleVarDeclaration) IDENT
					|
					(SingleVarArrayDecl) IDENT LBRACKET RBRACKET
					;

MultipleVarDecl ::= (LastMultipleVarDecl) COMMA SingleVarDecl
					|
					(MultipleVarDeclList) COMMA SingleVarDecl MultipleVarDecl
					;

ClassDeclName ::= 	(ClassDeclNameExtend) CLASS IDENT EXTENDS Type
					|
					(ClassDeclNameNoExtend) CLASS IDENT
					;
					
VarDeclList ::= (NoEmptyVarDeclList) VarDeclList VarDecl
				|
				(EmptyVarDeclList) /* epsilon */
				;
					
ClassDecl ::= 	(ClassDeclNoMethods) ClassDeclName LBRACE VarDeclList RBRACE
				|
				(ClassDeclMethods) ClassDeclName LBRACE VarDeclList LBRACE ConstructorDeclList MethodDeclList RBRACE RBRACE
				|
				(ClassDeclCons) ClassDeclName LBRACE VarDeclList LBRACE ConstructorDeclList RBRACE RBRACE
				|
				(ClassDeclMethod) ClassDeclName LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
				|
				(ClassDeclEmpty) ClassDeclName LBRACE VarDeclList LBRACE RBRACE RBRACE
				;

ConstructorDeclList ::= (MultipleConstructorDeclList) ConstructorDeclList ConstructorDecl
						|
						(SingleConstructorDeclList) ConstructorDecl
						;

MethodDeclList ::= 	(MultipleMethodDeclList) MethodDeclList MethodDecl
					|
					(SingleMethodDeclList) MethodDecl
					;

ConstructorDecl ::= (ConstructorDeclNoFormParams) IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
					|
					(ConstructorDeclFormParams) IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
					;

StatementList ::= 	(NoEmptyStatementList) StatementList Statement
					|
					(EmptyStatementList) /* epsilon */
					;

MethodDeclReturn ::= 	(MethodDeclReturnVoid) VOID
						|
						(MethodDeclReturnType) Type
						;

MethodDecl ::= 	(MethodDeclFormPars) MethodDeclReturn IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
				|
				(MethodDeclNoFormPars) MethodDeclReturn IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				;

FormPars ::= 	(FormPar) Type SingleVarDecl
				|
				(MultipleFormPars) Type SingleVarDecl COMMA FormPars
				;
				
Type ::= (TypeIdent) IDENT;

Statement ::= 	(DesignatorStmt) DesignatorStatement SEMI
				|
				(IfElseStmt) IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				(IfStmt) IF LPAREN Condition RPAREN Statement
				|
				(WhileStmt) WHILE LPAREN Condition RPAREN Statement
				|
				(BreakStmt) BREAK SEMI
				|
				(ContinueStmt) CONTINUE SEMI
				|
				(ReturnEmptyStmt) RETURN SEMI
				|
				(ReturnStmt) RETURN Expr SEMI
				|
				(ReadStmt) READ LPAREN Designator RPAREN SEMI
				|
				(PrintStmt) PRINT LPAREN Expr PrintArgs RPAREN SEMI
				|
				(ForeachStmt) Designator DOT FOREACH LPAREN IDENT ARROW Statement RPAREN SEMI
				|
				(BlockStmt) LBRACE StatementList RBRACE
				;

PrintArgs ::= 	(PrintArgsNoEmpty) COMMA NUM PrintArgs
				|
				(PrintArgsEmpty) /* epsilon */
				;

ExprError ::= 	(ExprNoError) Expr
				|
				(ExprWithError) error:e
				{: parser.report_error("Sintaksna greska prilikom dodele vrednosti na liniji " + eleft, null); :}
				;
				
DesignatorStatement ::= (DesignatorAssignStmt) Designator Assignop ExprError
						|
						(DesignatorActParsStmt) Designator LPAREN ActPars RPAREN
						|
						(DesignatorEmptyActParsStmt) Designator LPAREN RPAREN
						|
						(DesignatorIncStmt) Designator INC
						|
						(DesignatorDecStmt) Designator DEC
						|
						(MultipleDesignatorAssignStmt) LBRACKET OptionalDesignator DesignatorList RBRACKET ASSIGN Designator
						;

DesignatorList ::= 	(NoEmptyDesignatorList) DesignatorList COMMA OptionalDesignator
					|
					(EmptyDesignatorList) /* epsilon */
					;
					
OptionalDesignator ::= 	(OptionalDesignatorExists) Designator
						|
						(OptionalDesignatorNotExists) /* epsilon */
						;
					
ActPars ::= (ActPar) Expr
			|
			(ActParsList) Expr COMMA ActPars
			;
			
Condition ::= 	(SingleCondition) CondTerm
				|
				(MultipleConditions) CondTerm OR Condition
				;
				
CondTerm ::= 	(SingleCondTerm) CondFact
				|
				(MultipleCondTerm) CondFact AND CondTerm
				;
				
CondFact ::= 	(SingleExpr) Expr
				|
				(MultipleExpr) Expr Relop Expr
				;
				
Expr ::=	(PosExpr) Term AddopTermList
			|
			(NegExpr) MINUS Term AddopTermList
			;
			
AddopTermList ::= 	(NoEmptyAddopTermList) Addop Term AddopTermList
					|
					(EmptyAddopTermList) /* epsilon */
					;
					
Term ::=	(SingleFactor) Factor
			|
			(MultipleFactors) Term Mulop Factor
			;
			
Factor ::= 	(FactorDesignatorEmpty) Designator
			|
			(FactorDesignatorActPars) Designator LPAREN ActPars RPAREN
			|
			(FactorDesignatorNoActPars) Designator LPAREN RPAREN
			|
			(FactorNum) NUM
			|
			(FactorChar) CHAR
			|
			(FactorBool) BOOL
			|
			(FactorNewExpr) NEW Type LBRACKET Expr RBRACKET
			|
			(FactorNewActPars) NEW Type LPAREN ActPars RPAREN
			|
			(FactorNewActParsEmpty) NEW Type LPAREN RPAREN
			|
			(FactorExpr) LPAREN Expr RPAREN
			;

Designator ::= 	(DesignatorIdent) IDENT
				|
				(DesignatorDotIdent) Designator DOT IDENT
				|
				(DesignatorExpr) Designator LBRACKET Expr RBRACKET
				;

Label ::= (LabelIdent) IDENT;

Assignop ::= (AssignopAssign) ASSIGN;

Relop ::= 	(Equals) EQ
			|
			(NotEquals) NEQ
			|
			(Greater) GT
			|
			(GreaterEquals) GTE
			|
			(Lesser) LT
			|
			(LesserEquals) LTE
			;

Addop ::= 	(Plus) PLUS
			|
			(Minus) MINUS
			;
			
Mulop ::=	(Mul) MUL
			|
			(Div) DIV
			|
			(Mod) MOD
			;
